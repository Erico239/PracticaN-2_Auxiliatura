"""
3. Definir las clases:  
Persona <ci, nombre, apellido, celular, fecha_Nac> 
Estudiante (heredado de persona) <ru, fecha_Ingreso, semestre> 
Docente (heredado de persona) <nit, profesión, especialidad> 
a) Diseñar el diagrama UML de las clases anteriores. 
b) Implementa las clases con sus constructores, datos por defecto y mostrar. 
c) Mostrar los estudiantes mayores de 25 años. 
d) Mostrar al docente que tiene la profesión de “Ingeniero”, es del sexo masculino y es el mayor de todos. 
e) Mostrar a los estudiantes y docentes que tienen el mismo apellido.
"""

class Persona:
    def __init__(self, ci="0000000", nombre="Sin nombre", apellido="Sin apellido", 
                 celular="00000000", fecha_nac="2000-01-01"):
        self._ci = ci
        self._nombre = nombre
        self._apellido = apellido
        self._celular = celular
        self._fecha_nac = fecha_nac

    def mostrar(self):
        print(f"CI: {self._ci}")
        print(f"Nombre: {self._nombre}")
        print(f"Apellido: {self._apellido}")
        print(f"Celular: {self._celular}")
        print(f"Fecha Nacimiento: {self._fecha_nac}")

    def get_edad(self):
        año_nac = int(self._fecha_nac.split("-")[0])
        return 2023 - año_nac  

    # Getters y Setters
    def get_ci(self): return self._ci
    def set_ci(self, ci): self._ci = ci
    def get_nombre(self): return self._nombre
    def set_nombre(self, nombre): self._nombre = nombre
    def get_apellido(self): return self._apellido
    def set_apellido(self, apellido): self._apellido = apellido
    def get_celular(self): return self._celular
    def set_celular(self, celular): self._celular = celular
    def get_fecha_nac(self): return self._fecha_nac
    def set_fecha_nac(self, fecha_nac): self._fecha_nac = fecha_nac

class Estudiante(Persona):
    def __init__(self, ci="0000000", nombre="Sin nombre", apellido="Sin apellido", 
                 celular="00000000", fecha_nac="2000-01-01", ru="00000", 
                 fecha_ingreso="2023-01-01", semestre=1):
        super().__init__(ci, nombre, apellido, celular, fecha_nac)
        self._ru = ru
        self._fecha_ingreso = fecha_ingreso
        self._semestre = semestre

    def mostrar(self):
        super().mostrar()
        print(f"RU: {self._ru}")
        print(f"Fecha Ingreso: {self._fecha_ingreso}")
        print(f"Semestre: {self._semestre}")

    # Getters y Setters
    def get_ru(self): return self._ru
    def set_ru(self, ru): self._ru = ru
    def get_fecha_ingreso(self): return self._fecha_ingreso
    def set_fecha_ingreso(self, fecha_ingreso): self._fecha_ingreso = fecha_ingreso
    def get_semestre(self): return self._semestre
    def set_semestre(self, semestre): self._semestre = semestre

class Docente(Persona):
    def __init__(self, ci="0000000", nombre="Sin nombre", apellido="Sin apellido", 
                 celular="00000000", fecha_nac="2000-01-01", nit="0000000", 
                 profesion="Sin profesión", especialidad="Sin especialidad", sexo="No especificado"):
        super().__init__(ci, nombre, apellido, celular, fecha_nac)
        self._nit = nit
        self._profesion = profesion
        self._especialidad = especialidad
        self._sexo = sexo

    def mostrar(self):
        super().mostrar()
        print(f"NIT: {self._nit}")
        print(f"Profesión: {self._profesion}")
        print(f"Especialidad: {self._especialidad}")
        print(f"Sexo: {self._sexo}")

    # Getters y Setters
    def get_nit(self): return self._nit
    def set_nit(self, nit): self._nit = nit
    def get_profesion(self): return self._profesion
    def set_profesion(self, profesion): self._profesion = profesion
    def get_especialidad(self): return self._especialidad
    def set_especialidad(self, especialidad): self._especialidad = especialidad
    def get_sexo(self): return self._sexo
    def set_sexo(self, sexo): self._sexo = sexo

if __name__ == "__main__":
    estudiantes = [
        Estudiante("1234567", "Ana", "Perez", "77777777", "1995-05-10", "2023001", "2023-03-15", 2),
        Estudiante("7654321", "Luis", "Gomez", "66666666", "2005-08-20", "2023002", "2023-03-15", 1)
    ]

    docentes = [
        Docente("9876543", "Carlos", "Perez", "55555555", "1980-12-01", "NIT001", "Ingeniero", "Sistemas", "Masculino"),
        Docente("6543210", "Maria", "Lopez", "44444444", "1975-07-25", "NIT002", "Arquitecta", "Diseño", "Femenino")
    ]

    # c) Estudiantes mayores de 25 años
    print("\nEstudiantes mayores de 25 años:")
    for e in estudiantes:
        if e.get_edad() > 25:
            e.mostrar()
            print()

    # d) Docente Ingeniero, masculino y mayor
    print("\nDocente Ingeniero, masculino y mayor:")
    docente_mayor = None
    for d in docentes:
        if d.get_profesion() == "Ingeniero" and d.get_sexo() == "Masculino":
            if docente_mayor is None or d.get_edad() > docente_mayor.get_edad():
                docente_mayor = d
    if docente_mayor:
        docente_mayor.mostrar()

    # e) Mismo apellido
    print("\nPersonas con mismo apellido:")
    for e in estudiantes:
        for d in docentes:
            if e.get_apellido() == d.get_apellido():
                print("Coincidencia:")
                e.mostrar()
                d.mostrar()
                print()
